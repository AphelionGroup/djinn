/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "App.h"

#include "App.tcc"

namespace facebook { namespace windtunnel { namespace treadmill { namespace services { namespace dnn {

std::unique_ptr<apache::thrift::AsyncProcessor> AppSvIf::getProcessor() {
  return std::unique_ptr<apache::thrift::AsyncProcessor>(new AppAsyncProcessor((AppSvIf*)this));
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY AppSvIf::getprio_asr(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio25 = reqCtx->getCallPriority();
  if (prio25 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio25;
  }
  return apache::thrift::concurrency::NORMAL;
}

folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> AppSvIf::future_asr() {
  folly::wangle::Promise<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> promise26;
  auto future27 = promise26.getFuture();
  apache::thrift::TApplicationException ex("Function asr is unimplemented");
  promise26.setException(ex);
  return future27;
}

void AppSvIf::async_eb_asr(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) {
  auto callbackp = callback.release();
  setConnectionContext(callbackp->getConnectionContext());
  setThreadManager(callbackp->getThreadManager());
  setEventBase(callbackp->getEventBase());
  try {
    auto future28 = future_asr();
    future28.then([=](folly::wangle::Try<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>&& _return) {
      try {
        callbackp->resultInThread(std::move(_return.value()));
      } catch(...) {
        callbackp->exceptionInThread(std::current_exception());
      }
    }
    );
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY AppSvIf::getprio_imc(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio29 = reqCtx->getCallPriority();
  if (prio29 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio29;
  }
  return apache::thrift::concurrency::NORMAL;
}

folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> AppSvIf::future_imc() {
  folly::wangle::Promise<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> promise30;
  auto future31 = promise30.getFuture();
  apache::thrift::TApplicationException ex("Function imc is unimplemented");
  promise30.setException(ex);
  return future31;
}

void AppSvIf::async_eb_imc(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) {
  auto callbackp = callback.release();
  setConnectionContext(callbackp->getConnectionContext());
  setThreadManager(callbackp->getThreadManager());
  setEventBase(callbackp->getEventBase());
  try {
    auto future32 = future_imc();
    future32.then([=](folly::wangle::Try<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>&& _return) {
      try {
        callbackp->resultInThread(std::move(_return.value()));
      } catch(...) {
        callbackp->exceptionInThread(std::current_exception());
      }
    }
    );
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY AppSvIf::getprio_dig(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio33 = reqCtx->getCallPriority();
  if (prio33 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio33;
  }
  return apache::thrift::concurrency::NORMAL;
}

folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> AppSvIf::future_dig() {
  folly::wangle::Promise<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> promise34;
  auto future35 = promise34.getFuture();
  apache::thrift::TApplicationException ex("Function dig is unimplemented");
  promise34.setException(ex);
  return future35;
}

void AppSvIf::async_eb_dig(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) {
  auto callbackp = callback.release();
  setConnectionContext(callbackp->getConnectionContext());
  setThreadManager(callbackp->getThreadManager());
  setEventBase(callbackp->getEventBase());
  try {
    auto future36 = future_dig();
    future36.then([=](folly::wangle::Try<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>&& _return) {
      try {
        callbackp->resultInThread(std::move(_return.value()));
      } catch(...) {
        callbackp->exceptionInThread(std::current_exception());
      }
    }
    );
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY AppSvIf::getprio_face(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio37 = reqCtx->getCallPriority();
  if (prio37 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio37;
  }
  return apache::thrift::concurrency::NORMAL;
}

folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> AppSvIf::future_face() {
  folly::wangle::Promise<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> promise38;
  auto future39 = promise38.getFuture();
  apache::thrift::TApplicationException ex("Function face is unimplemented");
  promise38.setException(ex);
  return future39;
}

void AppSvIf::async_eb_face(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) {
  auto callbackp = callback.release();
  setConnectionContext(callbackp->getConnectionContext());
  setThreadManager(callbackp->getThreadManager());
  setEventBase(callbackp->getEventBase());
  try {
    auto future40 = future_face();
    future40.then([=](folly::wangle::Try<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>&& _return) {
      try {
        callbackp->resultInThread(std::move(_return.value()));
      } catch(...) {
        callbackp->exceptionInThread(std::current_exception());
      }
    }
    );
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY AppSvIf::getprio_pos(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio41 = reqCtx->getCallPriority();
  if (prio41 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio41;
  }
  return apache::thrift::concurrency::NORMAL;
}

folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> AppSvIf::future_pos() {
  folly::wangle::Promise<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> promise42;
  auto future43 = promise42.getFuture();
  apache::thrift::TApplicationException ex("Function pos is unimplemented");
  promise42.setException(ex);
  return future43;
}

void AppSvIf::async_eb_pos(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) {
  auto callbackp = callback.release();
  setConnectionContext(callbackp->getConnectionContext());
  setThreadManager(callbackp->getThreadManager());
  setEventBase(callbackp->getEventBase());
  try {
    auto future44 = future_pos();
    future44.then([=](folly::wangle::Try<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>&& _return) {
      try {
        callbackp->resultInThread(std::move(_return.value()));
      } catch(...) {
        callbackp->exceptionInThread(std::current_exception());
      }
    }
    );
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY AppSvIf::getprio_ner(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio45 = reqCtx->getCallPriority();
  if (prio45 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio45;
  }
  return apache::thrift::concurrency::NORMAL;
}

folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> AppSvIf::future_ner() {
  folly::wangle::Promise<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> promise46;
  auto future47 = promise46.getFuture();
  apache::thrift::TApplicationException ex("Function ner is unimplemented");
  promise46.setException(ex);
  return future47;
}

void AppSvIf::async_eb_ner(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) {
  auto callbackp = callback.release();
  setConnectionContext(callbackp->getConnectionContext());
  setThreadManager(callbackp->getThreadManager());
  setEventBase(callbackp->getEventBase());
  try {
    auto future48 = future_ner();
    future48.then([=](folly::wangle::Try<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>&& _return) {
      try {
        callbackp->resultInThread(std::move(_return.value()));
      } catch(...) {
        callbackp->exceptionInThread(std::current_exception());
      }
    }
    );
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY AppSvIf::getprio_chk(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio49 = reqCtx->getCallPriority();
  if (prio49 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio49;
  }
  return apache::thrift::concurrency::NORMAL;
}

folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> AppSvIf::future_chk() {
  folly::wangle::Promise<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> promise50;
  auto future51 = promise50.getFuture();
  apache::thrift::TApplicationException ex("Function chk is unimplemented");
  promise50.setException(ex);
  return future51;
}

void AppSvIf::async_eb_chk(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) {
  auto callbackp = callback.release();
  setConnectionContext(callbackp->getConnectionContext());
  setThreadManager(callbackp->getThreadManager());
  setEventBase(callbackp->getEventBase());
  try {
    auto future52 = future_chk();
    future52.then([=](folly::wangle::Try<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>&& _return) {
      try {
        callbackp->resultInThread(std::move(_return.value()));
      } catch(...) {
        callbackp->exceptionInThread(std::current_exception());
      }
    }
    );
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY AppSvIf::getprio_srl(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio53 = reqCtx->getCallPriority();
  if (prio53 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio53;
  }
  return apache::thrift::concurrency::NORMAL;
}

folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> AppSvIf::future_srl() {
  folly::wangle::Promise<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> promise54;
  auto future55 = promise54.getFuture();
  apache::thrift::TApplicationException ex("Function srl is unimplemented");
  promise54.setException(ex);
  return future55;
}

void AppSvIf::async_eb_srl(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) {
  auto callbackp = callback.release();
  setConnectionContext(callbackp->getConnectionContext());
  setThreadManager(callbackp->getThreadManager());
  setEventBase(callbackp->getEventBase());
  try {
    auto future56 = future_srl();
    future56.then([=](folly::wangle::Try<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>&& _return) {
      try {
        callbackp->resultInThread(std::move(_return.value()));
      } catch(...) {
        callbackp->exceptionInThread(std::current_exception());
      }
    }
    );
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
}

std::string AppAsyncProcessor::getServiceName() {
  return "App";
}

void AppAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType,apache::thrift::Cpp2RequestContext* context,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  std::string fname;
  apache::thrift::MessageType mtype;
  int32_t protoSeqId = 0;
  switch(protType) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      std::unique_ptr<apache::thrift::BinaryProtocolReader> iprot(new apache::thrift::BinaryProtocolReader());
      iprot->setInput(buf.get());
      try {
        iprot->readMessageBegin(fname, mtype, protoSeqId);
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message from client" << " in function process";
          apache::thrift::TApplicationException x("invalid message from client");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message from client" << " in oneway function process";
        }
        return;
      }
      if (mtype != apache::thrift::T_CALL && mtype != apache::thrift::T_ONEWAY) {
        LOG(ERROR) << "received invalid message of type " << mtype;
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message arguments" << " in function process";
          apache::thrift::TApplicationException x("invalid message arguments");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message arguments" << " in oneway function process";
        }
      }
      auto pfn = binaryProcessMap_.find(fname);
      if (pfn == binaryProcessMap_.end()) {
        const std::string exMsg = folly::stringPrintf( "Method name %s not found", fname.c_str());
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << exMsg << " in function process";
          apache::thrift::TApplicationException x(exMsg);
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << exMsg << " in oneway function process";
        }
        return;
      }
      (this->*(pfn->second))(std::move(req), std::move(buf), std::move(iprot), context, eb, tm);
      return;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      std::unique_ptr<apache::thrift::CompactProtocolReader> iprot(new apache::thrift::CompactProtocolReader());
      iprot->setInput(buf.get());
      try {
        iprot->readMessageBegin(fname, mtype, protoSeqId);
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message from client" << " in function process";
          apache::thrift::TApplicationException x("invalid message from client");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message from client" << " in oneway function process";
        }
        return;
      }
      if (mtype != apache::thrift::T_CALL && mtype != apache::thrift::T_ONEWAY) {
        LOG(ERROR) << "received invalid message of type " << mtype;
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message arguments" << " in function process";
          apache::thrift::TApplicationException x("invalid message arguments");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message arguments" << " in oneway function process";
        }
      }
      auto pfn = compactProcessMap_.find(fname);
      if (pfn == compactProcessMap_.end()) {
        const std::string exMsg = folly::stringPrintf( "Method name %s not found", fname.c_str());
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << exMsg << " in function process";
          apache::thrift::TApplicationException x(exMsg);
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << exMsg << " in oneway function process";
        }
        return;
      }
      (this->*(pfn->second))(std::move(req), std::move(buf), std::move(iprot), context, eb, tm);
      return;
    }
    default:
    {
      LOG(ERROR) << "invalid protType: " << protType;
      return;
      break;
    }
  }
}

bool AppAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  std::string fname;
  apache::thrift::MessageType mtype;
  int32_t protoSeqId = 0;
  apache::thrift::protocol::PROTOCOL_TYPES protType = static_cast<apache::thrift::protocol::PROTOCOL_TYPES>(header->getProtocolId());
  switch(protType) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader iprot;
      iprot.setInput(buf);
      try {
        iprot.readMessageBegin(fname, mtype, protoSeqId);
        auto it = onewayMethods.find(fname);
        return it != onewayMethods.end();
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        return false;
      }
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader iprot;
      iprot.setInput(buf);
      try {
        iprot.readMessageBegin(fname, mtype, protoSeqId);
        auto it = onewayMethods.find(fname);
        return it != onewayMethods.end();
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        return false;
      }
    }
    default:
    {
      LOG(ERROR) << "invalid protType: " << protType;
      break;
    }
  }
  return false;
}

std::unordered_set<std::string> AppAsyncProcessor::onewayMethods {};
AppAsyncProcessor::binaryProcessMap AppAsyncProcessor::binaryProcessMap_ {
  {"asr", &AppAsyncProcessor::process_asr<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"imc", &AppAsyncProcessor::process_imc<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"dig", &AppAsyncProcessor::process_dig<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"face", &AppAsyncProcessor::process_face<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"pos", &AppAsyncProcessor::process_pos<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"ner", &AppAsyncProcessor::process_ner<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"chk", &AppAsyncProcessor::process_chk<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"srl", &AppAsyncProcessor::process_srl<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}
};
AppAsyncProcessor::compactProcessMap AppAsyncProcessor::compactProcessMap_ {
  {"asr", &AppAsyncProcessor::process_asr<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"imc", &AppAsyncProcessor::process_imc<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"dig", &AppAsyncProcessor::process_dig<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"face", &AppAsyncProcessor::process_face<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"pos", &AppAsyncProcessor::process_pos<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"ner", &AppAsyncProcessor::process_ner<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"chk", &AppAsyncProcessor::process_chk<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"srl", &AppAsyncProcessor::process_srl<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>}
};

std::string AppAsyncClient::getServiceName() {
  return "App";
}

void AppAsyncClient::asr(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  asr(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::callback_asr(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  asr(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::asr(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      asrT(&writer, rpcOptions, std::move(callback));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      asrT(&writer, rpcOptions, std::move(callback));
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void AppAsyncClient::sync_asr( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  sync_asr(::apache::thrift::RpcOptions(), _return);
}

void AppAsyncClient::sync_asr(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback57(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  asr(rpcOptions, std::move(callback57));
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_asr(_return, _returnState);
}

void AppAsyncClient::asr(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  asr(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

void AppAsyncClient::functor_asr(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  asr(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_asr() {
  return future_asr(::apache::thrift::RpcOptions());
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_asr(const apache::thrift::RpcOptions& rpcOptions) {
  folly::wangle::Promise< ::facebook::windtunnel::treadmill::services::dnn::AppResult> promise58;
  auto future59 = promise58.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback60(new apache::thrift::FutureCallback< ::facebook::windtunnel::treadmill::services::dnn::AppResult>(std::move(promise58), recv_asr));
  asr(rpcOptions, std::move(callback60));
  return std::move(future59);
}

folly::exception_wrapper AppAsyncClient::recv_wrapped_asr( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_asrT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_asrT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void AppAsyncClient::recv_asr( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_asr(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void AppAsyncClient::recv_instance_asr( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_asr(_return, state);
}

folly::exception_wrapper AppAsyncClient::recv_instance_wrapped_asr( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_asr(_return, state);
}

void AppAsyncClient::imc(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  imc(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::callback_imc(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  imc(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::imc(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      imcT(&writer, rpcOptions, std::move(callback));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      imcT(&writer, rpcOptions, std::move(callback));
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void AppAsyncClient::sync_imc( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  sync_imc(::apache::thrift::RpcOptions(), _return);
}

void AppAsyncClient::sync_imc(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback62(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  imc(rpcOptions, std::move(callback62));
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_imc(_return, _returnState);
}

void AppAsyncClient::imc(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  imc(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

void AppAsyncClient::functor_imc(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  imc(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_imc() {
  return future_imc(::apache::thrift::RpcOptions());
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_imc(const apache::thrift::RpcOptions& rpcOptions) {
  folly::wangle::Promise< ::facebook::windtunnel::treadmill::services::dnn::AppResult> promise63;
  auto future64 = promise63.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback65(new apache::thrift::FutureCallback< ::facebook::windtunnel::treadmill::services::dnn::AppResult>(std::move(promise63), recv_imc));
  imc(rpcOptions, std::move(callback65));
  return std::move(future64);
}

folly::exception_wrapper AppAsyncClient::recv_wrapped_imc( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_imcT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_imcT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void AppAsyncClient::recv_imc( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_imc(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void AppAsyncClient::recv_instance_imc( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_imc(_return, state);
}

folly::exception_wrapper AppAsyncClient::recv_instance_wrapped_imc( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_imc(_return, state);
}

void AppAsyncClient::dig(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  dig(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::callback_dig(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  dig(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::dig(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      digT(&writer, rpcOptions, std::move(callback));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      digT(&writer, rpcOptions, std::move(callback));
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void AppAsyncClient::sync_dig( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  sync_dig(::apache::thrift::RpcOptions(), _return);
}

void AppAsyncClient::sync_dig(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback67(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  dig(rpcOptions, std::move(callback67));
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_dig(_return, _returnState);
}

void AppAsyncClient::dig(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  dig(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

void AppAsyncClient::functor_dig(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  dig(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_dig() {
  return future_dig(::apache::thrift::RpcOptions());
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_dig(const apache::thrift::RpcOptions& rpcOptions) {
  folly::wangle::Promise< ::facebook::windtunnel::treadmill::services::dnn::AppResult> promise68;
  auto future69 = promise68.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback70(new apache::thrift::FutureCallback< ::facebook::windtunnel::treadmill::services::dnn::AppResult>(std::move(promise68), recv_dig));
  dig(rpcOptions, std::move(callback70));
  return std::move(future69);
}

folly::exception_wrapper AppAsyncClient::recv_wrapped_dig( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_digT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_digT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void AppAsyncClient::recv_dig( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_dig(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void AppAsyncClient::recv_instance_dig( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_dig(_return, state);
}

folly::exception_wrapper AppAsyncClient::recv_instance_wrapped_dig( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_dig(_return, state);
}

void AppAsyncClient::face(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  face(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::callback_face(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  face(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::face(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      faceT(&writer, rpcOptions, std::move(callback));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      faceT(&writer, rpcOptions, std::move(callback));
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void AppAsyncClient::sync_face( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  sync_face(::apache::thrift::RpcOptions(), _return);
}

void AppAsyncClient::sync_face(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback72(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  face(rpcOptions, std::move(callback72));
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_face(_return, _returnState);
}

void AppAsyncClient::face(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  face(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

void AppAsyncClient::functor_face(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  face(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_face() {
  return future_face(::apache::thrift::RpcOptions());
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_face(const apache::thrift::RpcOptions& rpcOptions) {
  folly::wangle::Promise< ::facebook::windtunnel::treadmill::services::dnn::AppResult> promise73;
  auto future74 = promise73.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback75(new apache::thrift::FutureCallback< ::facebook::windtunnel::treadmill::services::dnn::AppResult>(std::move(promise73), recv_face));
  face(rpcOptions, std::move(callback75));
  return std::move(future74);
}

folly::exception_wrapper AppAsyncClient::recv_wrapped_face( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_faceT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_faceT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void AppAsyncClient::recv_face( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_face(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void AppAsyncClient::recv_instance_face( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_face(_return, state);
}

folly::exception_wrapper AppAsyncClient::recv_instance_wrapped_face( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_face(_return, state);
}

void AppAsyncClient::pos(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  pos(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::callback_pos(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  pos(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::pos(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      posT(&writer, rpcOptions, std::move(callback));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      posT(&writer, rpcOptions, std::move(callback));
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void AppAsyncClient::sync_pos( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  sync_pos(::apache::thrift::RpcOptions(), _return);
}

void AppAsyncClient::sync_pos(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback77(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  pos(rpcOptions, std::move(callback77));
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_pos(_return, _returnState);
}

void AppAsyncClient::pos(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  pos(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

void AppAsyncClient::functor_pos(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  pos(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_pos() {
  return future_pos(::apache::thrift::RpcOptions());
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_pos(const apache::thrift::RpcOptions& rpcOptions) {
  folly::wangle::Promise< ::facebook::windtunnel::treadmill::services::dnn::AppResult> promise78;
  auto future79 = promise78.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback80(new apache::thrift::FutureCallback< ::facebook::windtunnel::treadmill::services::dnn::AppResult>(std::move(promise78), recv_pos));
  pos(rpcOptions, std::move(callback80));
  return std::move(future79);
}

folly::exception_wrapper AppAsyncClient::recv_wrapped_pos( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_posT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_posT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void AppAsyncClient::recv_pos( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_pos(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void AppAsyncClient::recv_instance_pos( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_pos(_return, state);
}

folly::exception_wrapper AppAsyncClient::recv_instance_wrapped_pos( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_pos(_return, state);
}

void AppAsyncClient::ner(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  ner(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::callback_ner(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  ner(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::ner(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      nerT(&writer, rpcOptions, std::move(callback));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      nerT(&writer, rpcOptions, std::move(callback));
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void AppAsyncClient::sync_ner( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  sync_ner(::apache::thrift::RpcOptions(), _return);
}

void AppAsyncClient::sync_ner(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback82(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  ner(rpcOptions, std::move(callback82));
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_ner(_return, _returnState);
}

void AppAsyncClient::ner(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  ner(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

void AppAsyncClient::functor_ner(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  ner(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_ner() {
  return future_ner(::apache::thrift::RpcOptions());
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_ner(const apache::thrift::RpcOptions& rpcOptions) {
  folly::wangle::Promise< ::facebook::windtunnel::treadmill::services::dnn::AppResult> promise83;
  auto future84 = promise83.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback85(new apache::thrift::FutureCallback< ::facebook::windtunnel::treadmill::services::dnn::AppResult>(std::move(promise83), recv_ner));
  ner(rpcOptions, std::move(callback85));
  return std::move(future84);
}

folly::exception_wrapper AppAsyncClient::recv_wrapped_ner( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_nerT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_nerT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void AppAsyncClient::recv_ner( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_ner(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void AppAsyncClient::recv_instance_ner( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_ner(_return, state);
}

folly::exception_wrapper AppAsyncClient::recv_instance_wrapped_ner( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_ner(_return, state);
}

void AppAsyncClient::chk(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  chk(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::callback_chk(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  chk(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::chk(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      chkT(&writer, rpcOptions, std::move(callback));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      chkT(&writer, rpcOptions, std::move(callback));
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void AppAsyncClient::sync_chk( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  sync_chk(::apache::thrift::RpcOptions(), _return);
}

void AppAsyncClient::sync_chk(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback87(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  chk(rpcOptions, std::move(callback87));
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_chk(_return, _returnState);
}

void AppAsyncClient::chk(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  chk(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

void AppAsyncClient::functor_chk(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  chk(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_chk() {
  return future_chk(::apache::thrift::RpcOptions());
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_chk(const apache::thrift::RpcOptions& rpcOptions) {
  folly::wangle::Promise< ::facebook::windtunnel::treadmill::services::dnn::AppResult> promise88;
  auto future89 = promise88.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback90(new apache::thrift::FutureCallback< ::facebook::windtunnel::treadmill::services::dnn::AppResult>(std::move(promise88), recv_chk));
  chk(rpcOptions, std::move(callback90));
  return std::move(future89);
}

folly::exception_wrapper AppAsyncClient::recv_wrapped_chk( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_chkT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_chkT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void AppAsyncClient::recv_chk( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_chk(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void AppAsyncClient::recv_instance_chk( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_chk(_return, state);
}

folly::exception_wrapper AppAsyncClient::recv_instance_wrapped_chk( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_chk(_return, state);
}

void AppAsyncClient::srl(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  srl(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::callback_srl(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  srl(::apache::thrift::RpcOptions(), std::move(callback));
}

void AppAsyncClient::srl(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      srlT(&writer, rpcOptions, std::move(callback));
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      srlT(&writer, rpcOptions, std::move(callback));
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void AppAsyncClient::sync_srl( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  sync_srl(::apache::thrift::RpcOptions(), _return);
}

void AppAsyncClient::sync_srl(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback92(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  srl(rpcOptions, std::move(callback92));
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_srl(_return, _returnState);
}

void AppAsyncClient::srl(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  srl(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

void AppAsyncClient::functor_srl(std::function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  srl(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))));
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_srl() {
  return future_srl(::apache::thrift::RpcOptions());
}

folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> AppAsyncClient::future_srl(const apache::thrift::RpcOptions& rpcOptions) {
  folly::wangle::Promise< ::facebook::windtunnel::treadmill::services::dnn::AppResult> promise93;
  auto future94 = promise93.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback95(new apache::thrift::FutureCallback< ::facebook::windtunnel::treadmill::services::dnn::AppResult>(std::move(promise93), recv_srl));
  srl(rpcOptions, std::move(callback95));
  return std::move(future94);
}

folly::exception_wrapper AppAsyncClient::recv_wrapped_srl( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_srlT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_srlT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void AppAsyncClient::recv_srl( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_srl(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void AppAsyncClient::recv_instance_srl( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_srl(_return, state);
}

folly::exception_wrapper AppAsyncClient::recv_instance_wrapped_srl( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_srl(_return, state);
}

template uint32_t App_asr_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_asr_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_asr_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_asr_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_asr_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_asr_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_asr_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_asr_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_asr_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_asr_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool App_asr_args::operator==(const App_asr_args& /* rhs */) const {
  return true;
}

template uint32_t App_asr_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_asr_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_asr_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_asr_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_asr_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_asr_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_asr_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_asr_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_asr_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_asr_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_asr_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_asr_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_asr_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_asr_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_asr_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_asr_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_asr_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_asr_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_asr_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_asr_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_asr_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_asr_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_asr_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_asr_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_asr_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_asr_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_asr_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_asr_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_asr_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_asr_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void App_asr_result::__clear() {
  ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::clear(&success);
  __isset.__clear();
}

bool App_asr_result::operator==(const App_asr_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

template uint32_t App_imc_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_imc_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_imc_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_imc_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_imc_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_imc_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_imc_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_imc_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_imc_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_imc_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool App_imc_args::operator==(const App_imc_args& /* rhs */) const {
  return true;
}

template uint32_t App_imc_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_imc_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_imc_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_imc_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_imc_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_imc_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_imc_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_imc_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_imc_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_imc_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_imc_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_imc_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_imc_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_imc_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_imc_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_imc_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_imc_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_imc_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_imc_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_imc_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_imc_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_imc_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_imc_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_imc_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_imc_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_imc_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_imc_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_imc_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_imc_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_imc_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void App_imc_result::__clear() {
  ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::clear(&success);
  __isset.__clear();
}

bool App_imc_result::operator==(const App_imc_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

template uint32_t App_dig_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_dig_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_dig_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_dig_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_dig_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_dig_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_dig_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_dig_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_dig_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_dig_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool App_dig_args::operator==(const App_dig_args& /* rhs */) const {
  return true;
}

template uint32_t App_dig_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_dig_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_dig_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_dig_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_dig_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_dig_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_dig_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_dig_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_dig_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_dig_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_dig_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_dig_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_dig_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_dig_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_dig_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_dig_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_dig_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_dig_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_dig_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_dig_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_dig_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_dig_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_dig_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_dig_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_dig_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_dig_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_dig_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_dig_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_dig_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_dig_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void App_dig_result::__clear() {
  ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::clear(&success);
  __isset.__clear();
}

bool App_dig_result::operator==(const App_dig_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

template uint32_t App_face_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_face_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_face_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_face_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_face_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_face_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_face_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_face_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_face_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_face_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool App_face_args::operator==(const App_face_args& /* rhs */) const {
  return true;
}

template uint32_t App_face_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_face_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_face_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_face_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_face_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_face_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_face_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_face_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_face_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_face_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_face_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_face_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_face_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_face_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_face_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_face_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_face_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_face_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_face_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_face_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_face_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_face_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_face_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_face_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_face_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_face_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_face_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_face_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_face_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_face_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void App_face_result::__clear() {
  ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::clear(&success);
  __isset.__clear();
}

bool App_face_result::operator==(const App_face_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

template uint32_t App_pos_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_pos_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_pos_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_pos_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_pos_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_pos_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_pos_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_pos_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_pos_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_pos_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool App_pos_args::operator==(const App_pos_args& /* rhs */) const {
  return true;
}

template uint32_t App_pos_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_pos_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_pos_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_pos_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_pos_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_pos_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_pos_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_pos_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_pos_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_pos_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_pos_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_pos_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_pos_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_pos_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_pos_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_pos_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_pos_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_pos_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_pos_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_pos_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_pos_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_pos_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_pos_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_pos_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_pos_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_pos_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_pos_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_pos_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_pos_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_pos_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void App_pos_result::__clear() {
  ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::clear(&success);
  __isset.__clear();
}

bool App_pos_result::operator==(const App_pos_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

template uint32_t App_ner_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_ner_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_ner_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_ner_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_ner_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_ner_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_ner_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_ner_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_ner_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_ner_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool App_ner_args::operator==(const App_ner_args& /* rhs */) const {
  return true;
}

template uint32_t App_ner_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_ner_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_ner_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_ner_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_ner_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_ner_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_ner_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_ner_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_ner_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_ner_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_ner_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_ner_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_ner_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_ner_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_ner_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_ner_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_ner_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_ner_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_ner_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_ner_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_ner_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_ner_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_ner_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_ner_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_ner_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_ner_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_ner_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_ner_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_ner_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_ner_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void App_ner_result::__clear() {
  ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::clear(&success);
  __isset.__clear();
}

bool App_ner_result::operator==(const App_ner_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

template uint32_t App_chk_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_chk_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_chk_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_chk_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_chk_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_chk_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_chk_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_chk_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_chk_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_chk_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool App_chk_args::operator==(const App_chk_args& /* rhs */) const {
  return true;
}

template uint32_t App_chk_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_chk_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_chk_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_chk_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_chk_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_chk_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_chk_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_chk_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_chk_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_chk_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_chk_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_chk_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_chk_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_chk_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_chk_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_chk_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_chk_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_chk_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_chk_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_chk_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_chk_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_chk_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_chk_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_chk_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_chk_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_chk_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_chk_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_chk_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_chk_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_chk_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void App_chk_result::__clear() {
  ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::clear(&success);
  __isset.__clear();
}

bool App_chk_result::operator==(const App_chk_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

template uint32_t App_srl_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_srl_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_srl_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_srl_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_srl_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_srl_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_srl_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_srl_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_srl_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_srl_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

bool App_srl_args::operator==(const App_srl_args& /* rhs */) const {
  return true;
}

template uint32_t App_srl_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_srl_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_srl_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_srl_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_srl_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_srl_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_srl_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_srl_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_srl_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_srl_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_srl_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_srl_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_srl_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_srl_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_srl_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_srl_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_srl_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_srl_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_srl_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_srl_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t App_srl_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t App_srl_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_srl_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_srl_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t App_srl_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t App_srl_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_srl_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_srl_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t App_srl_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t App_srl_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void App_srl_result::__clear() {
  ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::clear(&success);
  __isset.__clear();
}

bool App_srl_result::operator==(const App_srl_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

}}}}} // facebook::windtunnel::treadmill::services::dnn
namespace apache { namespace thrift {

}} // apache::thrift