/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <folly/wangle/Future.h>
#include "dnn_types.h"
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>



namespace facebook { namespace windtunnel { namespace treadmill { namespace services { namespace dnn {

class AppSvAsyncIf {
 public:
  virtual ~AppSvAsyncIf() {}
  virtual void async_eb_asr(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = 0;
  virtual void async_asr(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = delete;
  virtual folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_asr() = 0;
  virtual void async_eb_imc(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = 0;
  virtual void async_imc(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = delete;
  virtual folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_imc() = 0;
  virtual void async_eb_dig(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = 0;
  virtual void async_dig(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = delete;
  virtual folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_dig() = 0;
  virtual void async_eb_face(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = 0;
  virtual void async_face(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = delete;
  virtual folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_face() = 0;
  virtual void async_eb_pos(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = 0;
  virtual void async_pos(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = delete;
  virtual folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_pos() = 0;
  virtual void async_eb_ner(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = 0;
  virtual void async_ner(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = delete;
  virtual folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_ner() = 0;
  virtual void async_eb_chk(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = 0;
  virtual void async_chk(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = delete;
  virtual folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_chk() = 0;
  virtual void async_eb_srl(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = 0;
  virtual void async_srl(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback) = delete;
  virtual folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_srl() = 0;
};

class AppAsyncProcessor;

class AppSvIf : public AppSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef AppAsyncProcessor ProcessorType;

  virtual ~AppSvIf() {}
  virtual std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor();
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_asr(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void asr( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) = delete;
  folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_asr();
  virtual void async_eb_asr(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback);
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_imc(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void imc( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) = delete;
  folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_imc();
  virtual void async_eb_imc(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback);
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_dig(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void dig( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) = delete;
  folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_dig();
  virtual void async_eb_dig(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback);
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_face(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void face( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) = delete;
  folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_face();
  virtual void async_eb_face(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback);
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_pos(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void pos( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) = delete;
  folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_pos();
  virtual void async_eb_pos(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback);
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_ner(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void ner( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) = delete;
  folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_ner();
  virtual void async_eb_ner(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback);
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_chk(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void chk( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) = delete;
  folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_chk();
  virtual void async_eb_chk(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback);
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_srl(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void srl( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return) = delete;
  folly::wangle::Future<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>> future_srl();
  virtual void async_eb_srl(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback);
};

class AppSvNull : public AppSvIf {
 public:
  virtual ~AppSvNull() {}
};

class AppAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  virtual std::string getServiceName();
 protected:
  AppSvIf* iface_;
  virtual void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType,apache::thrift::Cpp2RequestContext* context,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  virtual bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header);
 private:
  static std::unordered_set<std::string> onewayMethods;
  typedef void (AppAsyncProcessor::*binaryProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::BinaryProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, binaryProcessFunction> binaryProcessMap;
  static AppAsyncProcessor::binaryProcessMap binaryProcessMap_;
  typedef void (AppAsyncProcessor::*compactProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::CompactProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, compactProcessFunction> compactProcessMap;
  static AppAsyncProcessor::compactProcessMap compactProcessMap_;
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_asr(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_asr(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_asr(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_asr(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_imc(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_imc(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_imc(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_imc(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_dig(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_dig(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_dig(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_dig(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_face(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_face(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_face(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_face(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_pos(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_pos(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_pos(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_pos(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_ner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_ner(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_ner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_ner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_chk(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_chk(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_chk(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_chk(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_srl(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_srl(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_srl(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_srl(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  AppAsyncProcessor(AppSvIf* iface) :
      iface_(iface) {}

  virtual ~AppAsyncProcessor() {}
};

class AppAsyncClient : public apache::thrift::TClientBase {
 public:
  virtual std::string getServiceName();
  typedef std::unique_ptr<apache::thrift::RequestChannel, apache::thrift::async::TDelayedDestruction::Destructor> channel_ptr;

  virtual ~AppAsyncClient() {}

  AppAsyncClient(std::shared_ptr<apache::thrift::RequestChannel> channel) :
      channel_(channel) {
    connectionContext_ = std::unique_ptr<TClientBase::ConnContext>(new TClientBase::ConnContext(channel_->getHeader(),nullptr));
  }

  apache::thrift::RequestChannel*  getChannel() {
    return this->channel_.get();
  }
  virtual void asr(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void callback_asr(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void asr(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void sync_asr( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void sync_asr(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void asr(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual void functor_asr(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_asr();
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_asr(const apache::thrift::RpcOptions& rpcOptions);
  static folly::exception_wrapper recv_wrapped_asr( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_asr( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_asr( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_asr( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void asrT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_asrT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_asrT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void imc(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void callback_imc(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void imc(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void sync_imc( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void sync_imc(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void imc(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual void functor_imc(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_imc();
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_imc(const apache::thrift::RpcOptions& rpcOptions);
  static folly::exception_wrapper recv_wrapped_imc( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_imc( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_imc( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_imc( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void imcT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_imcT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_imcT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void dig(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void callback_dig(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void dig(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void sync_dig( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void sync_dig(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void dig(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual void functor_dig(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_dig();
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_dig(const apache::thrift::RpcOptions& rpcOptions);
  static folly::exception_wrapper recv_wrapped_dig( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_dig( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_dig( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_dig( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void digT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_digT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_digT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void face(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void callback_face(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void face(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void sync_face( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void sync_face(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void face(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual void functor_face(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_face();
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_face(const apache::thrift::RpcOptions& rpcOptions);
  static folly::exception_wrapper recv_wrapped_face( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_face( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_face( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_face( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void faceT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_faceT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_faceT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void pos(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void callback_pos(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void pos(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void sync_pos( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void sync_pos(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void pos(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual void functor_pos(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_pos();
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_pos(const apache::thrift::RpcOptions& rpcOptions);
  static folly::exception_wrapper recv_wrapped_pos( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_pos( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_pos( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_pos( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void posT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_posT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_posT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void ner(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void callback_ner(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void ner(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void sync_ner( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void sync_ner(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void ner(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual void functor_ner(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_ner();
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_ner(const apache::thrift::RpcOptions& rpcOptions);
  static folly::exception_wrapper recv_wrapped_ner( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_ner( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_ner( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_ner( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void nerT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_nerT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_nerT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void chk(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void callback_chk(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void chk(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void sync_chk( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void sync_chk(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void chk(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual void functor_chk(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_chk();
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_chk(const apache::thrift::RpcOptions& rpcOptions);
  static folly::exception_wrapper recv_wrapped_chk( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_chk( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_chk( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_chk( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void chkT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_chkT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_chkT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void srl(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void callback_srl(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void srl(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void sync_srl( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void sync_srl(const apache::thrift::RpcOptions& rpcOptions,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return);
  virtual void srl(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual void functor_srl(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_srl();
  virtual folly::wangle::Future< ::facebook::windtunnel::treadmill::services::dnn::AppResult> future_srl(const apache::thrift::RpcOptions& rpcOptions);
  static folly::exception_wrapper recv_wrapped_srl( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_srl( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_srl( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_srl( ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void srlT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_srlT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_srlT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state);
 protected:
  std::unique_ptr<apache::thrift::server::TConnectionContext>connectionContext_;
  std::shared_ptr<apache::thrift::RequestChannel> channel_;
};

class App_asr_args : private boost::totally_ordered<App_asr_args> {
 public:

  App_asr_args() {}
  // FragileConstructor for use in initialization lists only

  App_asr_args(apache::thrift::FragileConstructor) {}

  App_asr_args(App_asr_args&&) = default;

  App_asr_args(const App_asr_args&) = default;

  App_asr_args& operator=(App_asr_args&&) = default;

  App_asr_args& operator=(const App_asr_args&) = default;

  virtual ~App_asr_args() throw() {}

  bool operator==(const App_asr_args& /* rhs */) const;

  bool operator < (const App_asr_args& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_asr_pargs : private boost::totally_ordered<App_asr_pargs> {
 public:
  virtual ~App_asr_pargs() throw() {}


  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_asr_presult : private boost::totally_ordered<App_asr_presult> {
 public:
  virtual ~App_asr_presult() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_asr_result : private boost::totally_ordered<App_asr_result> {
 public:

  App_asr_result() {}
  // FragileConstructor for use in initialization lists only

  App_asr_result(apache::thrift::FragileConstructor,  ::facebook::windtunnel::treadmill::services::dnn::AppResult success__arg) :
      success(std::move(success__arg)) {}

  App_asr_result(App_asr_result&&) = default;

  App_asr_result(const App_asr_result&) = default;

  App_asr_result& operator=(App_asr_result&&) = default;

  App_asr_result& operator=(const App_asr_result&) = default;
  void __clear();

  virtual ~App_asr_result() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const App_asr_result& rhs) const;
  bool operator < (const App_asr_result& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_imc_args : private boost::totally_ordered<App_imc_args> {
 public:

  App_imc_args() {}
  // FragileConstructor for use in initialization lists only

  App_imc_args(apache::thrift::FragileConstructor) {}

  App_imc_args(App_imc_args&&) = default;

  App_imc_args(const App_imc_args&) = default;

  App_imc_args& operator=(App_imc_args&&) = default;

  App_imc_args& operator=(const App_imc_args&) = default;

  virtual ~App_imc_args() throw() {}

  bool operator==(const App_imc_args& /* rhs */) const;

  bool operator < (const App_imc_args& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_imc_pargs : private boost::totally_ordered<App_imc_pargs> {
 public:
  virtual ~App_imc_pargs() throw() {}


  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_imc_presult : private boost::totally_ordered<App_imc_presult> {
 public:
  virtual ~App_imc_presult() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_imc_result : private boost::totally_ordered<App_imc_result> {
 public:

  App_imc_result() {}
  // FragileConstructor for use in initialization lists only

  App_imc_result(apache::thrift::FragileConstructor,  ::facebook::windtunnel::treadmill::services::dnn::AppResult success__arg) :
      success(std::move(success__arg)) {}

  App_imc_result(App_imc_result&&) = default;

  App_imc_result(const App_imc_result&) = default;

  App_imc_result& operator=(App_imc_result&&) = default;

  App_imc_result& operator=(const App_imc_result&) = default;
  void __clear();

  virtual ~App_imc_result() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const App_imc_result& rhs) const;
  bool operator < (const App_imc_result& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_dig_args : private boost::totally_ordered<App_dig_args> {
 public:

  App_dig_args() {}
  // FragileConstructor for use in initialization lists only

  App_dig_args(apache::thrift::FragileConstructor) {}

  App_dig_args(App_dig_args&&) = default;

  App_dig_args(const App_dig_args&) = default;

  App_dig_args& operator=(App_dig_args&&) = default;

  App_dig_args& operator=(const App_dig_args&) = default;

  virtual ~App_dig_args() throw() {}

  bool operator==(const App_dig_args& /* rhs */) const;

  bool operator < (const App_dig_args& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_dig_pargs : private boost::totally_ordered<App_dig_pargs> {
 public:
  virtual ~App_dig_pargs() throw() {}


  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_dig_presult : private boost::totally_ordered<App_dig_presult> {
 public:
  virtual ~App_dig_presult() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_dig_result : private boost::totally_ordered<App_dig_result> {
 public:

  App_dig_result() {}
  // FragileConstructor for use in initialization lists only

  App_dig_result(apache::thrift::FragileConstructor,  ::facebook::windtunnel::treadmill::services::dnn::AppResult success__arg) :
      success(std::move(success__arg)) {}

  App_dig_result(App_dig_result&&) = default;

  App_dig_result(const App_dig_result&) = default;

  App_dig_result& operator=(App_dig_result&&) = default;

  App_dig_result& operator=(const App_dig_result&) = default;
  void __clear();

  virtual ~App_dig_result() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const App_dig_result& rhs) const;
  bool operator < (const App_dig_result& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_face_args : private boost::totally_ordered<App_face_args> {
 public:

  App_face_args() {}
  // FragileConstructor for use in initialization lists only

  App_face_args(apache::thrift::FragileConstructor) {}

  App_face_args(App_face_args&&) = default;

  App_face_args(const App_face_args&) = default;

  App_face_args& operator=(App_face_args&&) = default;

  App_face_args& operator=(const App_face_args&) = default;

  virtual ~App_face_args() throw() {}

  bool operator==(const App_face_args& /* rhs */) const;

  bool operator < (const App_face_args& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_face_pargs : private boost::totally_ordered<App_face_pargs> {
 public:
  virtual ~App_face_pargs() throw() {}


  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_face_presult : private boost::totally_ordered<App_face_presult> {
 public:
  virtual ~App_face_presult() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_face_result : private boost::totally_ordered<App_face_result> {
 public:

  App_face_result() {}
  // FragileConstructor for use in initialization lists only

  App_face_result(apache::thrift::FragileConstructor,  ::facebook::windtunnel::treadmill::services::dnn::AppResult success__arg) :
      success(std::move(success__arg)) {}

  App_face_result(App_face_result&&) = default;

  App_face_result(const App_face_result&) = default;

  App_face_result& operator=(App_face_result&&) = default;

  App_face_result& operator=(const App_face_result&) = default;
  void __clear();

  virtual ~App_face_result() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const App_face_result& rhs) const;
  bool operator < (const App_face_result& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_pos_args : private boost::totally_ordered<App_pos_args> {
 public:

  App_pos_args() {}
  // FragileConstructor for use in initialization lists only

  App_pos_args(apache::thrift::FragileConstructor) {}

  App_pos_args(App_pos_args&&) = default;

  App_pos_args(const App_pos_args&) = default;

  App_pos_args& operator=(App_pos_args&&) = default;

  App_pos_args& operator=(const App_pos_args&) = default;

  virtual ~App_pos_args() throw() {}

  bool operator==(const App_pos_args& /* rhs */) const;

  bool operator < (const App_pos_args& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_pos_pargs : private boost::totally_ordered<App_pos_pargs> {
 public:
  virtual ~App_pos_pargs() throw() {}


  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_pos_presult : private boost::totally_ordered<App_pos_presult> {
 public:
  virtual ~App_pos_presult() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_pos_result : private boost::totally_ordered<App_pos_result> {
 public:

  App_pos_result() {}
  // FragileConstructor for use in initialization lists only

  App_pos_result(apache::thrift::FragileConstructor,  ::facebook::windtunnel::treadmill::services::dnn::AppResult success__arg) :
      success(std::move(success__arg)) {}

  App_pos_result(App_pos_result&&) = default;

  App_pos_result(const App_pos_result&) = default;

  App_pos_result& operator=(App_pos_result&&) = default;

  App_pos_result& operator=(const App_pos_result&) = default;
  void __clear();

  virtual ~App_pos_result() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const App_pos_result& rhs) const;
  bool operator < (const App_pos_result& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_ner_args : private boost::totally_ordered<App_ner_args> {
 public:

  App_ner_args() {}
  // FragileConstructor for use in initialization lists only

  App_ner_args(apache::thrift::FragileConstructor) {}

  App_ner_args(App_ner_args&&) = default;

  App_ner_args(const App_ner_args&) = default;

  App_ner_args& operator=(App_ner_args&&) = default;

  App_ner_args& operator=(const App_ner_args&) = default;

  virtual ~App_ner_args() throw() {}

  bool operator==(const App_ner_args& /* rhs */) const;

  bool operator < (const App_ner_args& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_ner_pargs : private boost::totally_ordered<App_ner_pargs> {
 public:
  virtual ~App_ner_pargs() throw() {}


  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_ner_presult : private boost::totally_ordered<App_ner_presult> {
 public:
  virtual ~App_ner_presult() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_ner_result : private boost::totally_ordered<App_ner_result> {
 public:

  App_ner_result() {}
  // FragileConstructor for use in initialization lists only

  App_ner_result(apache::thrift::FragileConstructor,  ::facebook::windtunnel::treadmill::services::dnn::AppResult success__arg) :
      success(std::move(success__arg)) {}

  App_ner_result(App_ner_result&&) = default;

  App_ner_result(const App_ner_result&) = default;

  App_ner_result& operator=(App_ner_result&&) = default;

  App_ner_result& operator=(const App_ner_result&) = default;
  void __clear();

  virtual ~App_ner_result() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const App_ner_result& rhs) const;
  bool operator < (const App_ner_result& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_chk_args : private boost::totally_ordered<App_chk_args> {
 public:

  App_chk_args() {}
  // FragileConstructor for use in initialization lists only

  App_chk_args(apache::thrift::FragileConstructor) {}

  App_chk_args(App_chk_args&&) = default;

  App_chk_args(const App_chk_args&) = default;

  App_chk_args& operator=(App_chk_args&&) = default;

  App_chk_args& operator=(const App_chk_args&) = default;

  virtual ~App_chk_args() throw() {}

  bool operator==(const App_chk_args& /* rhs */) const;

  bool operator < (const App_chk_args& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_chk_pargs : private boost::totally_ordered<App_chk_pargs> {
 public:
  virtual ~App_chk_pargs() throw() {}


  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_chk_presult : private boost::totally_ordered<App_chk_presult> {
 public:
  virtual ~App_chk_presult() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_chk_result : private boost::totally_ordered<App_chk_result> {
 public:

  App_chk_result() {}
  // FragileConstructor for use in initialization lists only

  App_chk_result(apache::thrift::FragileConstructor,  ::facebook::windtunnel::treadmill::services::dnn::AppResult success__arg) :
      success(std::move(success__arg)) {}

  App_chk_result(App_chk_result&&) = default;

  App_chk_result(const App_chk_result&) = default;

  App_chk_result& operator=(App_chk_result&&) = default;

  App_chk_result& operator=(const App_chk_result&) = default;
  void __clear();

  virtual ~App_chk_result() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const App_chk_result& rhs) const;
  bool operator < (const App_chk_result& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_srl_args : private boost::totally_ordered<App_srl_args> {
 public:

  App_srl_args() {}
  // FragileConstructor for use in initialization lists only

  App_srl_args(apache::thrift::FragileConstructor) {}

  App_srl_args(App_srl_args&&) = default;

  App_srl_args(const App_srl_args&) = default;

  App_srl_args& operator=(App_srl_args&&) = default;

  App_srl_args& operator=(const App_srl_args&) = default;

  virtual ~App_srl_args() throw() {}

  bool operator==(const App_srl_args& /* rhs */) const;

  bool operator < (const App_srl_args& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_srl_pargs : private boost::totally_ordered<App_srl_pargs> {
 public:
  virtual ~App_srl_pargs() throw() {}


  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_srl_presult : private boost::totally_ordered<App_srl_presult> {
 public:
  virtual ~App_srl_presult() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class App_srl_result : private boost::totally_ordered<App_srl_result> {
 public:

  App_srl_result() {}
  // FragileConstructor for use in initialization lists only

  App_srl_result(apache::thrift::FragileConstructor,  ::facebook::windtunnel::treadmill::services::dnn::AppResult success__arg) :
      success(std::move(success__arg)) {}

  App_srl_result(App_srl_result&&) = default;

  App_srl_result(const App_srl_result&) = default;

  App_srl_result& operator=(App_srl_result&&) = default;

  App_srl_result& operator=(const App_srl_result&) = default;
  void __clear();

  virtual ~App_srl_result() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::AppResult success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const App_srl_result& rhs) const;
  bool operator < (const App_srl_result& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

}}}}} // facebook::windtunnel::treadmill::services::dnn
namespace apache { namespace thrift {

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_args>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_asr_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_args>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_asr_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_args>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_asr_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_args>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_asr_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_pargs>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_asr_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_pargs>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_asr_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_pargs>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_asr_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_pargs>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_asr_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_presult>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_asr_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_presult>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_asr_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_presult>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_asr_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_presult>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_asr_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_result>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_asr_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_result>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_asr_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_result>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_asr_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_asr_result>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_asr_result* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_args>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_imc_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_args>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_imc_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_args>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_imc_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_args>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_imc_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_pargs>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_imc_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_pargs>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_imc_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_pargs>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_imc_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_pargs>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_imc_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_presult>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_imc_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_presult>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_imc_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_presult>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_imc_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_presult>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_imc_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_result>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_imc_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_result>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_imc_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_result>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_imc_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_imc_result>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_imc_result* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_args>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_dig_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_args>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_dig_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_args>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_dig_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_args>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_dig_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_pargs>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_dig_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_pargs>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_dig_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_pargs>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_dig_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_pargs>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_dig_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_presult>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_dig_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_presult>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_dig_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_presult>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_dig_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_presult>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_dig_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_result>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_dig_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_result>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_dig_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_result>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_dig_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_dig_result>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_dig_result* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_args>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_face_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_args>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_face_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_args>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_face_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_args>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_face_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_pargs>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_face_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_pargs>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_face_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_pargs>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_face_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_pargs>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_face_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_presult>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_face_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_presult>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_face_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_presult>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_face_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_presult>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_face_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_result>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_face_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_result>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_face_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_result>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_face_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_face_result>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_face_result* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_args>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_pos_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_args>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_pos_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_args>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_pos_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_args>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_pos_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_pargs>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_pos_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_pargs>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_pos_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_pargs>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_pos_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_pargs>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_pos_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_presult>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_pos_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_presult>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_pos_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_presult>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_pos_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_presult>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_pos_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_result>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_pos_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_result>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_pos_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_result>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_pos_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_pos_result>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_pos_result* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_args>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_ner_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_args>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_ner_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_args>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_ner_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_args>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_ner_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_pargs>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_ner_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_pargs>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_ner_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_pargs>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_ner_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_pargs>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_ner_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_presult>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_ner_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_presult>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_ner_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_presult>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_ner_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_presult>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_ner_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_result>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_ner_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_result>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_ner_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_result>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_ner_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_ner_result>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_ner_result* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_args>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_chk_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_args>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_chk_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_args>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_chk_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_args>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_chk_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_pargs>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_chk_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_pargs>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_chk_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_pargs>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_chk_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_pargs>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_chk_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_presult>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_chk_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_presult>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_chk_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_presult>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_chk_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_presult>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_chk_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_result>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_chk_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_result>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_chk_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_result>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_chk_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_chk_result>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_chk_result* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_args>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_srl_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_args>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_srl_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_args>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_srl_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_args>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_srl_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_pargs>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_srl_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_pargs>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_srl_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_pargs>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_srl_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_pargs>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_srl_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_presult>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_srl_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_presult>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_srl_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_presult>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_srl_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_presult>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_srl_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_result>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_srl_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_result>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::App_srl_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_result>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_srl_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::App_srl_result>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::App_srl_result* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift