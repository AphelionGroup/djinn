/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "Dnn.h"

#include <thrift/lib/cpp/TApplicationException.h>

namespace facebook { namespace windtunnel { namespace treadmill { namespace services { namespace dnn {

template <typename ProtocolIn_, typename ProtocolOut_>
void DnnAsyncProcessor::process_fwd(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  Dnn_fwd_pargs args;
  std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::Work> uarg_input(new  ::facebook::windtunnel::treadmill::services::dnn::Work());
  args.input = uarg_input.get();
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "Dnn.fwd", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function fwd";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("fwd", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function fwd";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::ServerResult>>> callback(new apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::ServerResult>>(std::move(req), std::move(c), return_fwd<ProtocolIn_,ProtocolOut_>, throw_fwd<ProtocolIn_, ProtocolOut_>, throw_wrapped_fwd<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  iface_->async_eb_fwd(std::move(callback), std::move(uarg_input));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue DnnAsyncProcessor::return_fwd(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::ServerResult const& _return) {
  ProtocolOut_ prot;
  Dnn_fwd_presult result;
  result.success = const_cast< ::facebook::windtunnel::treadmill::services::dnn::ServerResult*>(&_return);
  result.__isset.success = true;
  return serializeResponse("fwd", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void DnnAsyncProcessor::throw_fwd(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function fwd";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("fwd", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function fwd";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function fwd";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("fwd", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function fwd";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void DnnAsyncProcessor::throw_wrapped_fwd(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function fwd";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("fwd", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function fwd";
    }
  }
}

template <typename Protocol_>
void DnnAsyncClient::fwdT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::facebook::windtunnel::treadmill::services::dnn::Work& input) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "Dnn.fwd", connectionContext_.get());
  Dnn_fwd_pargs args;
  args.input = const_cast< ::facebook::windtunnel::treadmill::services::dnn::Work*>(&input);
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("fwd");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("fwd", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  this->channel_->sendRequest(std::move(rpcOptions), std::move(callback), std::move(ctx), queue.move());
}

template <typename Protocol_>
folly::exception_wrapper DnnAsyncClient::recv_wrapped_fwdT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::ServerResult& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("fwd") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    Dnn_fwd_presult result;
    result.success = &_return;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
    if (result.__isset.success) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void DnnAsyncClient::recv_fwdT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::ServerResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_fwdT(prot, _return, state);
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
uint32_t Dnn_fwd_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::Work>::read(iprot, &this->input);
          this->__isset.input = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Dnn_fwd_args");
  xfer += prot_->serializedFieldSize("input", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::Work>::serializedSize(prot_, &this->input);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Dnn_fwd_args");
  xfer += prot_->serializedFieldSize("input", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::Work>::serializedSizeZC(prot_, &this->input);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Dnn_fwd_args");
  xfer += prot_->writeFieldBegin("input", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::Work>::write(prot_, &this->input);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::Work>::read(iprot, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::Work*>(this->input)));
          this->__isset.input = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Dnn_fwd_pargs");
  xfer += prot_->serializedFieldSize("input", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::Work>::serializedSize(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::Work*>(this->input)));
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Dnn_fwd_pargs");
  xfer += prot_->serializedFieldSize("input", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::Work>::serializedSizeZC(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::Work*>(this->input)));
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Dnn_fwd_pargs");
  xfer += prot_->writeFieldBegin("input", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::Work>::write(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::Work*>(this->input)));
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::read(iprot, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::ServerResult*>(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Dnn_fwd_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::serializedSize(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::ServerResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Dnn_fwd_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::serializedSizeZC(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::ServerResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Dnn_fwd_presult");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::write(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::ServerResult*>(this->success)));
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::read(iprot, &this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Dnn_fwd_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::serializedSize(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Dnn_fwd_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::serializedSizeZC(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Dnn_fwd_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Dnn_fwd_result");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::write(prot_, &this->success);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // facebook::windtunnel::treadmill::services::dnn
namespace apache { namespace thrift {

}} // apache::thrift