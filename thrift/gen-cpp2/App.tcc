/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "App.h"

#include <thrift/lib/cpp/TApplicationException.h>

namespace facebook { namespace windtunnel { namespace treadmill { namespace services { namespace dnn {

template <typename ProtocolIn_, typename ProtocolOut_>
void AppAsyncProcessor::process_asr(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  App_asr_pargs args;
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "App.asr", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function asr";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("asr", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function asr";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback(new apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>(std::move(req), std::move(c), return_asr<ProtocolIn_,ProtocolOut_>, throw_asr<ProtocolIn_, ProtocolOut_>, throw_wrapped_asr<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  iface_->async_eb_asr(std::move(callback));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue AppAsyncProcessor::return_asr(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return) {
  ProtocolOut_ prot;
  App_asr_presult result;
  result.success = const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(&_return);
  result.__isset.success = true;
  return serializeResponse("asr", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_asr(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function asr";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("asr", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function asr";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function asr";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("asr", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function asr";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_wrapped_asr(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function asr";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("asr", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function asr";
    }
  }
}

template <typename ProtocolIn_, typename ProtocolOut_>
void AppAsyncProcessor::process_imc(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  App_imc_pargs args;
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "App.imc", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function imc";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("imc", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function imc";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback(new apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>(std::move(req), std::move(c), return_imc<ProtocolIn_,ProtocolOut_>, throw_imc<ProtocolIn_, ProtocolOut_>, throw_wrapped_imc<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  iface_->async_eb_imc(std::move(callback));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue AppAsyncProcessor::return_imc(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return) {
  ProtocolOut_ prot;
  App_imc_presult result;
  result.success = const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(&_return);
  result.__isset.success = true;
  return serializeResponse("imc", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_imc(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function imc";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("imc", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function imc";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function imc";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("imc", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function imc";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_wrapped_imc(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function imc";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("imc", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function imc";
    }
  }
}

template <typename ProtocolIn_, typename ProtocolOut_>
void AppAsyncProcessor::process_dig(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  App_dig_pargs args;
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "App.dig", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function dig";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("dig", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function dig";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback(new apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>(std::move(req), std::move(c), return_dig<ProtocolIn_,ProtocolOut_>, throw_dig<ProtocolIn_, ProtocolOut_>, throw_wrapped_dig<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  iface_->async_eb_dig(std::move(callback));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue AppAsyncProcessor::return_dig(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return) {
  ProtocolOut_ prot;
  App_dig_presult result;
  result.success = const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(&_return);
  result.__isset.success = true;
  return serializeResponse("dig", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_dig(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function dig";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("dig", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function dig";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function dig";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("dig", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function dig";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_wrapped_dig(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function dig";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("dig", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function dig";
    }
  }
}

template <typename ProtocolIn_, typename ProtocolOut_>
void AppAsyncProcessor::process_face(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  App_face_pargs args;
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "App.face", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function face";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("face", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function face";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback(new apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>(std::move(req), std::move(c), return_face<ProtocolIn_,ProtocolOut_>, throw_face<ProtocolIn_, ProtocolOut_>, throw_wrapped_face<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  iface_->async_eb_face(std::move(callback));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue AppAsyncProcessor::return_face(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return) {
  ProtocolOut_ prot;
  App_face_presult result;
  result.success = const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(&_return);
  result.__isset.success = true;
  return serializeResponse("face", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_face(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function face";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("face", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function face";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function face";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("face", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function face";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_wrapped_face(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function face";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("face", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function face";
    }
  }
}

template <typename ProtocolIn_, typename ProtocolOut_>
void AppAsyncProcessor::process_pos(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  App_pos_pargs args;
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "App.pos", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function pos";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("pos", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function pos";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback(new apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>(std::move(req), std::move(c), return_pos<ProtocolIn_,ProtocolOut_>, throw_pos<ProtocolIn_, ProtocolOut_>, throw_wrapped_pos<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  iface_->async_eb_pos(std::move(callback));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue AppAsyncProcessor::return_pos(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return) {
  ProtocolOut_ prot;
  App_pos_presult result;
  result.success = const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(&_return);
  result.__isset.success = true;
  return serializeResponse("pos", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_pos(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function pos";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("pos", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function pos";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function pos";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("pos", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function pos";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_wrapped_pos(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function pos";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("pos", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function pos";
    }
  }
}

template <typename ProtocolIn_, typename ProtocolOut_>
void AppAsyncProcessor::process_ner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  App_ner_pargs args;
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "App.ner", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function ner";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("ner", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function ner";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback(new apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>(std::move(req), std::move(c), return_ner<ProtocolIn_,ProtocolOut_>, throw_ner<ProtocolIn_, ProtocolOut_>, throw_wrapped_ner<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  iface_->async_eb_ner(std::move(callback));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue AppAsyncProcessor::return_ner(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return) {
  ProtocolOut_ prot;
  App_ner_presult result;
  result.success = const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(&_return);
  result.__isset.success = true;
  return serializeResponse("ner", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_ner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function ner";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("ner", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function ner";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function ner";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("ner", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function ner";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_wrapped_ner(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function ner";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("ner", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function ner";
    }
  }
}

template <typename ProtocolIn_, typename ProtocolOut_>
void AppAsyncProcessor::process_chk(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  App_chk_pargs args;
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "App.chk", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function chk";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("chk", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function chk";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback(new apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>(std::move(req), std::move(c), return_chk<ProtocolIn_,ProtocolOut_>, throw_chk<ProtocolIn_, ProtocolOut_>, throw_wrapped_chk<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  iface_->async_eb_chk(std::move(callback));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue AppAsyncProcessor::return_chk(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return) {
  ProtocolOut_ prot;
  App_chk_presult result;
  result.success = const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(&_return);
  result.__isset.success = true;
  return serializeResponse("chk", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_chk(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function chk";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("chk", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function chk";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function chk";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("chk", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function chk";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_wrapped_chk(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function chk";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("chk", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function chk";
    }
  }
}

template <typename ProtocolIn_, typename ProtocolOut_>
void AppAsyncProcessor::process_srl(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  // make sure getConnectionContext is null
  // so async calls don't accidentally use it
  iface_->setConnectionContext(nullptr);
  App_srl_pargs args;
  std::unique_ptr<apache::thrift::ContextStack> c(this->getContextStack(this->getServiceName(), "App.srl", ctx));
  try {
    deserializeRequest(args, buf.get(), iprot.get(), c.get());
  }
  catch (const std::exception& ex) {
    ProtocolOut_ prot;
    if (req) {
      LOG(ERROR) << ex.what() << " in function srl";
      apache::thrift::TApplicationException x(apache::thrift::TApplicationException::TApplicationExceptionType::PROTOCOL_ERROR, ex.what());
      folly::IOBufQueue queue = serializeException("srl", &prot, iprot->getSeqId(), nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), ctx->getTransforms(), ctx->getMinCompressBytes()));
      auto queue_mw = folly::makeMoveWrapper(std::move(queue));
      auto req_mw = folly::makeMoveWrapper(std::move(req));
      eb->runInEventBaseThread([=]() mutable {
        (*req_mw)->sendReply(queue_mw->move());
      }
      );
      return;
    }
    else {
      LOG(ERROR) << ex.what() << " in oneway function srl";
    }
  }
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>> callback(new apache::thrift::HandlerCallback<std::unique_ptr< ::facebook::windtunnel::treadmill::services::dnn::AppResult>>(std::move(req), std::move(c), return_srl<ProtocolIn_,ProtocolOut_>, throw_srl<ProtocolIn_, ProtocolOut_>, throw_wrapped_srl<ProtocolIn_, ProtocolOut_>, iprot->getSeqId(), eb, tm, ctx));
  iface_->async_eb_srl(std::move(callback));
}

template <class ProtocolIn_, class ProtocolOut_>
folly::IOBufQueue AppAsyncProcessor::return_srl(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx,  ::facebook::windtunnel::treadmill::services::dnn::AppResult const& _return) {
  ProtocolOut_ prot;
  App_srl_presult result;
  result.success = const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(&_return);
  result.__isset.success = true;
  return serializeResponse("srl", &prot, protoSeqId, ctx.get(), result);
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_srl(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx) {
  ProtocolOut_ prot;
  try {
    std::rethrow_exception(ep);
  }
  catch (const std::exception& e) {
    if (req) {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in function srl";
      apache::thrift::TApplicationException x(folly::exceptionStr(e).toStdString());
      ctx->userException(folly::demangle(typeid(e)).toStdString());
      folly::IOBufQueue queue = serializeException("srl", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << folly::exceptionStr(e).toStdString() << " in oneway function srl";
    }
  }
  catch (...) {
    if (req) {
      LOG(ERROR) << "<unknown exception>" << " in function srl";
      apache::thrift::TApplicationException x("<unknown exception>");
      folly::IOBufQueue queue = serializeException("srl", &prot, protoSeqId, nullptr, x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << "<unknown exception>" << " in oneway function srl";
    }
  }
}

template <class ProtocolIn_, class ProtocolOut_>
void AppAsyncProcessor::throw_wrapped_srl(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx) {
  if (!ew) {
    return;
  }
  ProtocolOut_ prot;
   {
    if (req) {
      LOG(ERROR) << ew.what().toStdString() << " in function srl";
      apache::thrift::TApplicationException x(ew.what().toStdString());
      ctx->userException(ew.class_name().toStdString());
      folly::IOBufQueue queue = serializeException("srl", &prot, protoSeqId, ctx.get(), x);
      queue.append(apache::thrift::transport::THeader::transform(queue.move(), reqCtx->getTransforms(), reqCtx->getMinCompressBytes()));
      req->sendReply(queue.move());
      return;
    }
    else {
      LOG(ERROR) << ew.what().toStdString() << " in oneway function srl";
    }
  }
}

template <typename Protocol_>
void AppAsyncClient::asrT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "App.asr", connectionContext_.get());
  App_asr_pargs args;
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("asr");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("asr", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  this->channel_->sendRequest(std::move(rpcOptions), std::move(callback), std::move(ctx), queue.move());
}

template <typename Protocol_>
folly::exception_wrapper AppAsyncClient::recv_wrapped_asrT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("asr") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    App_asr_presult result;
    result.success = &_return;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
    if (result.__isset.success) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void AppAsyncClient::recv_asrT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_asrT(prot, _return, state);
  if (ew) {
    ew.throwException();
  }
}

template <typename Protocol_>
void AppAsyncClient::imcT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "App.imc", connectionContext_.get());
  App_imc_pargs args;
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("imc");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("imc", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  this->channel_->sendRequest(std::move(rpcOptions), std::move(callback), std::move(ctx), queue.move());
}

template <typename Protocol_>
folly::exception_wrapper AppAsyncClient::recv_wrapped_imcT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("imc") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    App_imc_presult result;
    result.success = &_return;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
    if (result.__isset.success) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void AppAsyncClient::recv_imcT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_imcT(prot, _return, state);
  if (ew) {
    ew.throwException();
  }
}

template <typename Protocol_>
void AppAsyncClient::digT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "App.dig", connectionContext_.get());
  App_dig_pargs args;
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("dig");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("dig", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  this->channel_->sendRequest(std::move(rpcOptions), std::move(callback), std::move(ctx), queue.move());
}

template <typename Protocol_>
folly::exception_wrapper AppAsyncClient::recv_wrapped_digT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("dig") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    App_dig_presult result;
    result.success = &_return;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
    if (result.__isset.success) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void AppAsyncClient::recv_digT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_digT(prot, _return, state);
  if (ew) {
    ew.throwException();
  }
}

template <typename Protocol_>
void AppAsyncClient::faceT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "App.face", connectionContext_.get());
  App_face_pargs args;
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("face");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("face", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  this->channel_->sendRequest(std::move(rpcOptions), std::move(callback), std::move(ctx), queue.move());
}

template <typename Protocol_>
folly::exception_wrapper AppAsyncClient::recv_wrapped_faceT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("face") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    App_face_presult result;
    result.success = &_return;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
    if (result.__isset.success) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void AppAsyncClient::recv_faceT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_faceT(prot, _return, state);
  if (ew) {
    ew.throwException();
  }
}

template <typename Protocol_>
void AppAsyncClient::posT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "App.pos", connectionContext_.get());
  App_pos_pargs args;
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("pos");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("pos", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  this->channel_->sendRequest(std::move(rpcOptions), std::move(callback), std::move(ctx), queue.move());
}

template <typename Protocol_>
folly::exception_wrapper AppAsyncClient::recv_wrapped_posT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("pos") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    App_pos_presult result;
    result.success = &_return;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
    if (result.__isset.success) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void AppAsyncClient::recv_posT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_posT(prot, _return, state);
  if (ew) {
    ew.throwException();
  }
}

template <typename Protocol_>
void AppAsyncClient::nerT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "App.ner", connectionContext_.get());
  App_ner_pargs args;
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("ner");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("ner", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  this->channel_->sendRequest(std::move(rpcOptions), std::move(callback), std::move(ctx), queue.move());
}

template <typename Protocol_>
folly::exception_wrapper AppAsyncClient::recv_wrapped_nerT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("ner") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    App_ner_presult result;
    result.success = &_return;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
    if (result.__isset.success) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void AppAsyncClient::recv_nerT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_nerT(prot, _return, state);
  if (ew) {
    ew.throwException();
  }
}

template <typename Protocol_>
void AppAsyncClient::chkT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "App.chk", connectionContext_.get());
  App_chk_pargs args;
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("chk");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("chk", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  this->channel_->sendRequest(std::move(rpcOptions), std::move(callback), std::move(ctx), queue.move());
}

template <typename Protocol_>
folly::exception_wrapper AppAsyncClient::recv_wrapped_chkT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("chk") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    App_chk_presult result;
    result.success = &_return;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
    if (result.__isset.success) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void AppAsyncClient::recv_chkT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_chkT(prot, _return, state);
  if (ew) {
    ew.throwException();
  }
}

template <typename Protocol_>
void AppAsyncClient::srlT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "App.srl", connectionContext_.get());
  App_srl_pargs args;
  size_t bufSize = args.serializedSizeZC(prot);
  bufSize += prot->serializedMessageSize("srl");
  folly::IOBufQueue queue(folly::IOBufQueue::cacheChainLength());
  prot->setOutput(&queue, bufSize);
  auto guard = folly::makeGuard([&]{prot->setOutput(nullptr);});
  try {
    ctx->preWrite();
    prot->writeMessageBegin("srl", apache::thrift::T_CALL, 0);
    args.write(prot);
    prot->writeMessageEnd();
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = queue.front();
    ctx->onWriteData(smsg);
    ctx->postWrite(queue.chainLength());
  } catch(apache::thrift::TException &ex) {
    ctx->handlerError();
    throw;
  }
  this->channel_->sendRequest(std::move(rpcOptions), std::move(callback), std::move(ctx), queue.move());
}

template <typename Protocol_>
folly::exception_wrapper AppAsyncClient::recv_wrapped_srlT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return state.exceptionWrapper();
  }
  prot->setInput(state.buf());
  auto guard = folly::makeGuard([&] {prot->setInput(nullptr);});
  apache::thrift::ContextStack* ctx = state.ctx();
  std::string fname;
  int32_t protoSeqId = 0;
  apache::thrift::MessageType mtype;
  ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    prot->readMessageBegin(fname, mtype, protoSeqId);
    if (mtype == apache::thrift::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(prot);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::T_REPLY) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("srl") != 0) {
      prot->skip(apache::thrift::protocol::T_STRUCT);
      prot->readMessageEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    ::apache::thrift::SerializedMessage smsg;
    smsg.protocolType = prot->protocolType();
    smsg.buffer = state.buf();
    ctx->onReadData(smsg);
    App_srl_presult result;
    result.success = &_return;
    result.read(prot);
    prot->readMessageEnd();
    ctx->postRead(state.buf()->length());
    if (result.__isset.success) {
      // _return pointer has been filled
      return; // from try_and_catch
    }
    else {
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::TApplicationExceptionType::MISSING_RESULT, "failed: unknown result");
      return; // from try_and_catch
    }
  }
  );
  if (interior_ew || caught_ew) {
    ctx->handlerError();
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <typename Protocol_>
void AppAsyncClient::recv_srlT(Protocol_* prot,  ::facebook::windtunnel::treadmill::services::dnn::AppResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_srlT(prot, _return, state);
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
uint32_t App_asr_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_asr_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_asr_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_asr_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_asr_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_asr_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_asr_args");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_asr_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_asr_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_asr_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_asr_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_asr_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_asr_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_asr_pargs");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_asr_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_asr_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_asr_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_asr_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_asr_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_asr_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_asr_presult");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_asr_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_asr_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_asr_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_asr_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_asr_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_asr_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_asr_result");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &this->success);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_imc_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_imc_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_imc_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_imc_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_imc_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_imc_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_imc_args");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_imc_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_imc_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_imc_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_imc_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_imc_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_imc_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_imc_pargs");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_imc_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_imc_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_imc_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_imc_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_imc_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_imc_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_imc_presult");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_imc_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_imc_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_imc_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_imc_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_imc_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_imc_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_imc_result");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &this->success);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_dig_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_dig_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_dig_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_dig_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_dig_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_dig_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_dig_args");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_dig_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_dig_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_dig_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_dig_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_dig_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_dig_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_dig_pargs");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_dig_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_dig_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_dig_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_dig_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_dig_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_dig_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_dig_presult");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_dig_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_dig_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_dig_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_dig_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_dig_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_dig_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_dig_result");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &this->success);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_face_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_face_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_face_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_face_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_face_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_face_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_face_args");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_face_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_face_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_face_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_face_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_face_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_face_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_face_pargs");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_face_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_face_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_face_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_face_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_face_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_face_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_face_presult");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_face_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_face_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_face_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_face_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_face_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_face_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_face_result");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &this->success);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_pos_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_pos_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_pos_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_pos_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_pos_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_pos_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_pos_args");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_pos_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_pos_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_pos_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_pos_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_pos_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_pos_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_pos_pargs");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_pos_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_pos_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_pos_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_pos_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_pos_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_pos_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_pos_presult");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_pos_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_pos_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_pos_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_pos_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_pos_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_pos_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_pos_result");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &this->success);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_ner_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_ner_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_ner_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_ner_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_ner_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_ner_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_ner_args");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_ner_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_ner_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_ner_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_ner_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_ner_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_ner_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_ner_pargs");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_ner_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_ner_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_ner_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_ner_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_ner_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_ner_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_ner_presult");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_ner_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_ner_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_ner_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_ner_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_ner_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_ner_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_ner_result");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &this->success);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_chk_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_chk_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_chk_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_chk_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_chk_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_chk_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_chk_args");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_chk_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_chk_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_chk_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_chk_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_chk_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_chk_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_chk_pargs");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_chk_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_chk_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_chk_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_chk_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_chk_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_chk_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_chk_presult");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_chk_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_chk_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_chk_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_chk_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_chk_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_chk_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_chk_result");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &this->success);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_srl_args::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_srl_args::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_srl_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_srl_args::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_srl_args");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_srl_args::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_srl_args");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_srl_pargs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_srl_pargs::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_srl_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_srl_pargs::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_srl_pargs");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_srl_pargs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_srl_pargs");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_srl_presult::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_srl_presult::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_srl_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_srl_presult::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_srl_presult");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_srl_presult::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_srl_presult");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &(*const_cast< ::facebook::windtunnel::treadmill::services::dnn::AppResult*>(this->success)));
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t App_srl_result::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(iprot, &this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t App_srl_result::serializedSize(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_srl_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_srl_result::serializedSizeZC(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("App_srl_result");
  if (this->__isset.success) {
    xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(prot_, &this->success);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t App_srl_result::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("App_srl_result");
  if (this->__isset.success) {
    xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(prot_, &this->success);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}}}} // facebook::windtunnel::treadmill::services::dnn
namespace apache { namespace thrift {

}} // apache::thrift