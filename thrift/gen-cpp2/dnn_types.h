/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/DebugProtocol.h>
#include <thrift/lib/cpp2/protocol/VirtualProtocol.h>
#include <thrift/lib/cpp/protocol/TProtocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>
#include <boost/operators.hpp>




namespace facebook { namespace windtunnel { namespace treadmill { namespace services { namespace dnn {

class Work;
class ServerResult;
class AppResult;
typedef int32_t integer;

class Work : private boost::totally_ordered<Work> {
 public:

  Work() :
      n_in(0),
      c_in(0),
      w_in(0),
      h_in(0) {}
  // FragileConstructor for use in initialization lists only

  Work(apache::thrift::FragileConstructor, std::vector<double> data__arg, std::string op__arg,  ::facebook::windtunnel::treadmill::services::dnn::integer n_in__arg,  ::facebook::windtunnel::treadmill::services::dnn::integer c_in__arg,  ::facebook::windtunnel::treadmill::services::dnn::integer w_in__arg,  ::facebook::windtunnel::treadmill::services::dnn::integer h_in__arg) :
      data(std::move(data__arg)),
      op(std::move(op__arg)),
      n_in(std::move(n_in__arg)),
      c_in(std::move(c_in__arg)),
      w_in(std::move(w_in__arg)),
      h_in(std::move(h_in__arg)) {}

  Work(Work&&) = default;

  Work(const Work&) = default;

  Work& operator=(Work&&) = default;

  Work& operator=(const Work&) = default;
  void __clear();

  virtual ~Work() throw() {}

  std::vector<double> data;
  std::string op;
   ::facebook::windtunnel::treadmill::services::dnn::integer n_in;
   ::facebook::windtunnel::treadmill::services::dnn::integer c_in;
   ::facebook::windtunnel::treadmill::services::dnn::integer w_in;
   ::facebook::windtunnel::treadmill::services::dnn::integer h_in;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      data = false;
      op = false;
      n_in = false;
      c_in = false;
      w_in = false;
      h_in = false;
    }

    bool data;
    bool op;
    bool n_in;
    bool c_in;
    bool w_in;
    bool h_in;
  } __isset;
  bool operator==(const Work& rhs) const;
  bool operator < (const Work& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(Work& a, Work& b);

}}}}} // facebook::windtunnel::treadmill::services::dnn
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::Work>::clear( ::facebook::windtunnel::treadmill::services::dnn::Work* obj) {
  return obj->__clear();
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::Work>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::Work* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::Work>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::Work* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::Work>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::Work* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::Work>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::Work* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace windtunnel { namespace treadmill { namespace services { namespace dnn {

class ServerResult : private boost::totally_ordered<ServerResult> {
 public:

  ServerResult() :
      time_ms(0) {}
  // FragileConstructor for use in initialization lists only

  ServerResult(apache::thrift::FragileConstructor, std::vector<double> data__arg,  ::facebook::windtunnel::treadmill::services::dnn::integer time_ms__arg) :
      data(std::move(data__arg)),
      time_ms(std::move(time_ms__arg)) {}

  ServerResult(ServerResult&&) = default;

  ServerResult(const ServerResult&) = default;

  ServerResult& operator=(ServerResult&&) = default;

  ServerResult& operator=(const ServerResult&) = default;
  void __clear();

  virtual ~ServerResult() throw() {}

  std::vector<double> data;
   ::facebook::windtunnel::treadmill::services::dnn::integer time_ms;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      data = false;
      time_ms = false;
    }

    bool data;
    bool time_ms;
  } __isset;
  bool operator==(const ServerResult& rhs) const;
  bool operator < (const ServerResult& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(ServerResult& a, ServerResult& b);

}}}}} // facebook::windtunnel::treadmill::services::dnn
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::clear( ::facebook::windtunnel::treadmill::services::dnn::ServerResult* obj) {
  return obj->__clear();
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::ServerResult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::ServerResult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::ServerResult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::ServerResult>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::ServerResult* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace windtunnel { namespace treadmill { namespace services { namespace dnn {

class AppResult : private boost::totally_ordered<AppResult> {
 public:

  AppResult() :
      app_time(0),
      comm_time(0),
      fwd_time(0),
      comm_data_size(0) {}
  // FragileConstructor for use in initialization lists only

  AppResult(apache::thrift::FragileConstructor,  ::facebook::windtunnel::treadmill::services::dnn::integer app_time__arg,  ::facebook::windtunnel::treadmill::services::dnn::integer comm_time__arg,  ::facebook::windtunnel::treadmill::services::dnn::integer fwd_time__arg,  ::facebook::windtunnel::treadmill::services::dnn::integer comm_data_size__arg) :
      app_time(std::move(app_time__arg)),
      comm_time(std::move(comm_time__arg)),
      fwd_time(std::move(fwd_time__arg)),
      comm_data_size(std::move(comm_data_size__arg)) {}

  AppResult(AppResult&&) = default;

  AppResult(const AppResult&) = default;

  AppResult& operator=(AppResult&&) = default;

  AppResult& operator=(const AppResult&) = default;
  void __clear();

  virtual ~AppResult() throw() {}

   ::facebook::windtunnel::treadmill::services::dnn::integer app_time;
   ::facebook::windtunnel::treadmill::services::dnn::integer comm_time;
   ::facebook::windtunnel::treadmill::services::dnn::integer fwd_time;
   ::facebook::windtunnel::treadmill::services::dnn::integer comm_data_size;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      app_time = false;
      comm_time = false;
      fwd_time = false;
      comm_data_size = false;
    }

    bool app_time;
    bool comm_time;
    bool fwd_time;
    bool comm_data_size;
  } __isset;
  bool operator==(const AppResult& rhs) const;
  bool operator < (const AppResult& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(AppResult& a, AppResult& b);

}}}}} // facebook::windtunnel::treadmill::services::dnn
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::AppResult>::clear( ::facebook::windtunnel::treadmill::services::dnn::AppResult* obj) {
  return obj->__clear();
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::AppResult>::write(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::AppResult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::AppResult>::read(Protocol* proto,   ::facebook::windtunnel::treadmill::services::dnn::AppResult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSize(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::AppResult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::windtunnel::treadmill::services::dnn::AppResult>::serializedSizeZC(Protocol* proto, const  ::facebook::windtunnel::treadmill::services::dnn::AppResult* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace windtunnel { namespace treadmill { namespace services { namespace dnn {

}}}}} // facebook::windtunnel::treadmill::services::dnn