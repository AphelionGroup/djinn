/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <folly/wangle/Future.h>
#include "dnn_types.h"
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>



namespace dnn { namespace cpp2 {

class DnnSvAsyncIf {
 public:
  virtual ~DnnSvAsyncIf() {}
  virtual void async_eb_fwd(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::vector<double>>>> callback, std::unique_ptr< ::dnn::cpp2::Work> input) = 0;
  virtual void async_fwd(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::vector<double>>>> callback, std::unique_ptr< ::dnn::cpp2::Work> input) = delete;
  virtual folly::wangle::Future<std::unique_ptr<std::vector<double>>> future_fwd(std::unique_ptr< ::dnn::cpp2::Work> input) = 0;
};

class DnnAsyncProcessor;

class DnnSvIf : public DnnSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef DnnAsyncProcessor ProcessorType;

  virtual ~DnnSvIf() {}
  virtual std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor();
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_fwd(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual void fwd(std::vector<double>& _return, std::unique_ptr< ::dnn::cpp2::Work> input) = delete;
  folly::wangle::Future<std::unique_ptr<std::vector<double>>> future_fwd(std::unique_ptr< ::dnn::cpp2::Work> input);
  virtual void async_eb_fwd(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::vector<double>>>> callback, std::unique_ptr< ::dnn::cpp2::Work> input);
};

class DnnSvNull : public DnnSvIf {
 public:
  virtual ~DnnSvNull() {}
};

class DnnAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  virtual std::string getServiceName();
 protected:
  DnnSvIf* iface_;
  virtual void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType,apache::thrift::Cpp2RequestContext* context,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  virtual bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header);
 private:
  static std::unordered_set<std::string> onewayMethods;
  typedef void (DnnAsyncProcessor::*binaryProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::BinaryProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, binaryProcessFunction> binaryProcessMap;
  static DnnAsyncProcessor::binaryProcessMap binaryProcessMap_;
  typedef void (DnnAsyncProcessor::*compactProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::CompactProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, compactProcessFunction> compactProcessMap;
  static DnnAsyncProcessor::compactProcessMap compactProcessMap_;
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_fwd(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_fwd(int32_t protoSeqId, std::unique_ptr<apache::thrift::ContextStack> ctx, std::vector<double> const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_fwd(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_fwd(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,std::unique_ptr<apache::thrift::ContextStack> ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  DnnAsyncProcessor(DnnSvIf* iface) :
      iface_(iface) {}

  virtual ~DnnAsyncProcessor() {}
};

class DnnAsyncClient : public apache::thrift::TClientBase {
 public:
  virtual std::string getServiceName();
  typedef std::unique_ptr<apache::thrift::RequestChannel, apache::thrift::async::TDelayedDestruction::Destructor> channel_ptr;

  virtual ~DnnAsyncClient() {}

  DnnAsyncClient(std::shared_ptr<apache::thrift::RequestChannel> channel) :
      channel_(channel) {
    connectionContext_ = std::unique_ptr<TClientBase::ConnContext>(new TClientBase::ConnContext(channel_->getHeader(),nullptr));
  }

  apache::thrift::RequestChannel*  getChannel() {
    return this->channel_.get();
  }
  virtual void fwd(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::dnn::cpp2::Work& input);
  virtual void callback_fwd(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::dnn::cpp2::Work& input);
  virtual void fwd(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::dnn::cpp2::Work& input);
  virtual void sync_fwd(std::vector<double>& _return, const  ::dnn::cpp2::Work& input);
  virtual void sync_fwd(const apache::thrift::RpcOptions& rpcOptions, std::vector<double>& _return, const  ::dnn::cpp2::Work& input);
  virtual void fwd(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::dnn::cpp2::Work& input);
  virtual void functor_fwd(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::dnn::cpp2::Work& input);
  virtual folly::wangle::Future<std::vector<double>> future_fwd(const  ::dnn::cpp2::Work& input);
  virtual folly::wangle::Future<std::vector<double>> future_fwd(const apache::thrift::RpcOptions& rpcOptions, const  ::dnn::cpp2::Work& input);
  static folly::exception_wrapper recv_wrapped_fwd(std::vector<double>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_fwd(std::vector<double>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_fwd(std::vector<double>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_fwd(std::vector<double>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void fwdT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::dnn::cpp2::Work& input);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_fwdT(Protocol_* prot, std::vector<double>& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_fwdT(Protocol_* prot, std::vector<double>& _return, ::apache::thrift::ClientReceiveState& state);
 protected:
  std::unique_ptr<apache::thrift::server::TConnectionContext>connectionContext_;
  std::shared_ptr<apache::thrift::RequestChannel> channel_;
};

class Dnn_fwd_args : private boost::totally_ordered<Dnn_fwd_args> {
 public:

  Dnn_fwd_args() {}
  // FragileConstructor for use in initialization lists only

  Dnn_fwd_args(apache::thrift::FragileConstructor,  ::dnn::cpp2::Work input__arg) :
      input(std::move(input__arg)) {}

  Dnn_fwd_args(Dnn_fwd_args&&) = default;

  Dnn_fwd_args(const Dnn_fwd_args&) = default;

  Dnn_fwd_args& operator=(Dnn_fwd_args&&) = default;

  Dnn_fwd_args& operator=(const Dnn_fwd_args&) = default;
  void __clear();

  virtual ~Dnn_fwd_args() throw() {}

   ::dnn::cpp2::Work input;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      input = false;
    }

    bool input;
  } __isset;
  bool operator==(const Dnn_fwd_args& rhs) const;
  bool operator < (const Dnn_fwd_args& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class Dnn_fwd_pargs : private boost::totally_ordered<Dnn_fwd_pargs> {
 public:
  virtual ~Dnn_fwd_pargs() throw() {}

   ::dnn::cpp2::Work* input;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      input = false;
    }

    bool input;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class Dnn_fwd_presult : private boost::totally_ordered<Dnn_fwd_presult> {
 public:
  virtual ~Dnn_fwd_presult() throw() {}

  std::vector<double>* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class Dnn_fwd_result : private boost::totally_ordered<Dnn_fwd_result> {
 public:

  Dnn_fwd_result() {}
  // FragileConstructor for use in initialization lists only

  Dnn_fwd_result(apache::thrift::FragileConstructor, std::vector<double> success__arg) :
      success(std::move(success__arg)) {}

  Dnn_fwd_result(Dnn_fwd_result&&) = default;

  Dnn_fwd_result(const Dnn_fwd_result&) = default;

  Dnn_fwd_result& operator=(Dnn_fwd_result&&) = default;

  Dnn_fwd_result& operator=(const Dnn_fwd_result&) = default;
  void __clear();

  virtual ~Dnn_fwd_result() throw() {}

  std::vector<double> success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;
  bool operator==(const Dnn_fwd_result& rhs) const;

  bool operator < (const Dnn_fwd_result& rhs) const {
    if (!(success == rhs.success)) {
      return success < rhs.success;
    }
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

}} // dnn::cpp2
namespace apache { namespace thrift {

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_args>::write(Protocol* proto, const  ::dnn::cpp2::Dnn_fwd_args* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_args>::read(Protocol* proto,   ::dnn::cpp2::Dnn_fwd_args* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_args>::serializedSize(Protocol* proto, const  ::dnn::cpp2::Dnn_fwd_args* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_args>::serializedSizeZC(Protocol* proto, const  ::dnn::cpp2::Dnn_fwd_args* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_pargs>::write(Protocol* proto, const  ::dnn::cpp2::Dnn_fwd_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_pargs>::read(Protocol* proto,   ::dnn::cpp2::Dnn_fwd_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_pargs>::serializedSize(Protocol* proto, const  ::dnn::cpp2::Dnn_fwd_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_pargs>::serializedSizeZC(Protocol* proto, const  ::dnn::cpp2::Dnn_fwd_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_presult>::write(Protocol* proto, const  ::dnn::cpp2::Dnn_fwd_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_presult>::read(Protocol* proto,   ::dnn::cpp2::Dnn_fwd_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_presult>::serializedSize(Protocol* proto, const  ::dnn::cpp2::Dnn_fwd_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_presult>::serializedSizeZC(Protocol* proto, const  ::dnn::cpp2::Dnn_fwd_presult* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_result>::write(Protocol* proto, const  ::dnn::cpp2::Dnn_fwd_result* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_result>::read(Protocol* proto,   ::dnn::cpp2::Dnn_fwd_result* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_result>::serializedSize(Protocol* proto, const  ::dnn::cpp2::Dnn_fwd_result* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::dnn::cpp2::Dnn_fwd_result>::serializedSizeZC(Protocol* proto, const  ::dnn::cpp2::Dnn_fwd_result* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift