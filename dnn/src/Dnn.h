/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Dnn_H
#define Dnn_H

#include <thrift/TDispatchProcessor.h>
#include "dnn_types.h"

namespace dnn {

class DnnIf {
 public:
  virtual ~DnnIf() {}
  virtual void fwd(std::vector<double> & _return, const Work& input) = 0;
};

class DnnIfFactory {
 public:
  typedef DnnIf Handler;

  virtual ~DnnIfFactory() {}

  virtual DnnIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DnnIf* /* handler */) = 0;
};

class DnnIfSingletonFactory : virtual public DnnIfFactory {
 public:
  DnnIfSingletonFactory(const boost::shared_ptr<DnnIf>& iface) : iface_(iface) {}
  virtual ~DnnIfSingletonFactory() {}

  virtual DnnIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DnnIf* /* handler */) {}

 protected:
  boost::shared_ptr<DnnIf> iface_;
};

class DnnNull : virtual public DnnIf {
 public:
  virtual ~DnnNull() {}
  void fwd(std::vector<double> & /* _return */, const Work& /* input */) {
    return;
  }
};

typedef struct _Dnn_fwd_args__isset {
  _Dnn_fwd_args__isset() : input(false) {}
  bool input :1;
} _Dnn_fwd_args__isset;

class Dnn_fwd_args {
 public:

  static const char* ascii_fingerprint; // = "96176500D548CCEE0A75660B6F201EF9";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x17,0x65,0x00,0xD5,0x48,0xCC,0xEE,0x0A,0x75,0x66,0x0B,0x6F,0x20,0x1E,0xF9};

  Dnn_fwd_args(const Dnn_fwd_args&);
  Dnn_fwd_args& operator=(const Dnn_fwd_args&);
  Dnn_fwd_args() {
  }

  virtual ~Dnn_fwd_args() throw();
  Work input;

  _Dnn_fwd_args__isset __isset;

  void __set_input(const Work& val);

  bool operator == (const Dnn_fwd_args & rhs) const
  {
    if (!(input == rhs.input))
      return false;
    return true;
  }
  bool operator != (const Dnn_fwd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dnn_fwd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Dnn_fwd_args& obj);
};


class Dnn_fwd_pargs {
 public:

  static const char* ascii_fingerprint; // = "96176500D548CCEE0A75660B6F201EF9";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x17,0x65,0x00,0xD5,0x48,0xCC,0xEE,0x0A,0x75,0x66,0x0B,0x6F,0x20,0x1E,0xF9};


  virtual ~Dnn_fwd_pargs() throw();
  const Work* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Dnn_fwd_pargs& obj);
};

typedef struct _Dnn_fwd_result__isset {
  _Dnn_fwd_result__isset() : success(false) {}
  bool success :1;
} _Dnn_fwd_result__isset;

class Dnn_fwd_result {
 public:

  static const char* ascii_fingerprint; // = "225C301FF7EFA8615B0ADBDADA5E5084";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x5C,0x30,0x1F,0xF7,0xEF,0xA8,0x61,0x5B,0x0A,0xDB,0xDA,0xDA,0x5E,0x50,0x84};

  Dnn_fwd_result(const Dnn_fwd_result&);
  Dnn_fwd_result& operator=(const Dnn_fwd_result&);
  Dnn_fwd_result() {
  }

  virtual ~Dnn_fwd_result() throw();
  std::vector<double>  success;

  _Dnn_fwd_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  bool operator == (const Dnn_fwd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Dnn_fwd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dnn_fwd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Dnn_fwd_result& obj);
};

typedef struct _Dnn_fwd_presult__isset {
  _Dnn_fwd_presult__isset() : success(false) {}
  bool success :1;
} _Dnn_fwd_presult__isset;

class Dnn_fwd_presult {
 public:

  static const char* ascii_fingerprint; // = "225C301FF7EFA8615B0ADBDADA5E5084";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x5C,0x30,0x1F,0xF7,0xEF,0xA8,0x61,0x5B,0x0A,0xDB,0xDA,0xDA,0x5E,0x50,0x84};


  virtual ~Dnn_fwd_presult() throw();
  std::vector<double> * success;

  _Dnn_fwd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Dnn_fwd_presult& obj);
};

class DnnClient : virtual public DnnIf {
 public:
  DnnClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DnnClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void fwd(std::vector<double> & _return, const Work& input);
  void send_fwd(const Work& input);
  void recv_fwd(std::vector<double> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DnnProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DnnIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DnnProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_fwd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DnnProcessor(boost::shared_ptr<DnnIf> iface) :
    iface_(iface) {
    processMap_["fwd"] = &DnnProcessor::process_fwd;
  }

  virtual ~DnnProcessor() {}
};

class DnnProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DnnProcessorFactory(const ::boost::shared_ptr< DnnIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DnnIfFactory > handlerFactory_;
};

class DnnMultiface : virtual public DnnIf {
 public:
  DnnMultiface(std::vector<boost::shared_ptr<DnnIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DnnMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DnnIf> > ifaces_;
  DnnMultiface() {}
  void add(boost::shared_ptr<DnnIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void fwd(std::vector<double> & _return, const Work& input) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fwd(_return, input);
    }
    ifaces_[i]->fwd(_return, input);
    return;
  }

};

} // namespace

#endif
