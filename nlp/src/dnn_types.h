/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dnn_TYPES_H
#define dnn_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace dnn {

typedef struct _Work__isset {
  _Work__isset() : data(false), op(false) {}
  bool data;
  bool op;
} _Work__isset;

class Work {
 public:

  static const char* ascii_fingerprint; // = "8FF1C050A8D7FD247AEB23CD71539C09";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0xF1,0xC0,0x50,0xA8,0xD7,0xFD,0x24,0x7A,0xEB,0x23,0xCD,0x71,0x53,0x9C,0x09};

  Work() : op() {
  }

  virtual ~Work() throw() {}

  std::vector<double>  data;
  std::string op;

  _Work__isset __isset;

  void __set_data(const std::vector<double> & val) {
    data = val;
  }

  void __set_op(const std::string& val) {
    op = val;
  }

  bool operator == (const Work & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(op == rhs.op))
      return false;
    return true;
  }
  bool operator != (const Work &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Work & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Work &a, Work &b);

} // namespace

#endif
