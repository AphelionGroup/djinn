--- decode.sh.bkp	2014-10-24 19:44:59.261773914 -0400
+++ decode.sh	2014-10-24 19:44:00.961774059 -0400
@@ -27,6 +27,12 @@
 num_threads=1 # if >1, will use latgen-faster-parallel
 parallel_opts="-pe smp $((num_threads+1))" # use 2 CPUs (1 DNN-forward, 1 decoder)
 use_gpu="no" # yes|no|optionaly
+
+# Additional arguments to talk to dnn service
+use_srvice="false"
+hostname=
+portno=
+
 # End configuration section.
 
 echo "$0 $@"  # Print the command line for logging
@@ -59,9 +65,7 @@
    exit 1;
 fi
 
-
-graphdir=$1
-data=$2
+graphdir=$1 data=$2
 dir=$3
 [ -z $srcdir ] && srcdir=`dirname $dir`; # Default model directory one level up from decoding directory.
 sdata=$data/split$nj;
@@ -86,11 +90,9 @@
 thread_string=
 [ $num_threads -gt 1 ] && thread_string="-parallel --num-threads=$num_threads" 
 
-
-# PREPARE FEATURE EXTRACTION PIPELINE
-# Create the feature stream:
+# PREPARE FEATURE EXTRACTION PIPELINE # Create the feature stream:
 feats="ark,s,cs:copy-feats scp:$sdata/JOB/feats.scp ark:- |"
-# Optionally add cmvn
+## Optionally add cmvn
 if [ -f $srcdir/norm_vars ]; then
   norm_vars=$(cat $srcdir/norm_vars 2>/dev/null)
   [ ! -f $sdata/1/cmvn.scp ] && echo "$0: cannot find cmvn stats $sdata/1/cmvn.scp" && exit 1
@@ -105,17 +107,17 @@
 # Run the decoding in the queue
 if [ $stage -le 0 ]; then
   $cmd $parallel_opts JOB=1:$nj $dir/log/decode.JOB.log \
-    nnet-forward --feature-transform=$feature_transform --no-softmax=true --class-frame-counts=$class_frame_counts --use-gpu=$use_gpu $nnet "$feats" ark:- \| \
+    nnet-forward --use-service=$use_service --hostname=$hostname --portno=$portno --feature-transform=$feature_transform --no-softmax=true --class-frame-counts=$class_frame_counts --use-gpu=$use_gpu $nnet "$feats" ark:- \| \
     latgen-faster-mapped$thread_string --min-active=$min_active --max-active=$max_active --max-mem=$max_mem --beam=$beam \
     --lattice-beam=$lattice_beam --acoustic-scale=$acwt --allow-partial=true --word-symbol-table=$graphdir/words.txt \
     $model $graphdir/HCLG.fst ark:- "ark:|gzip -c > $dir/lat.JOB.gz" || exit 1;
 fi
 
 # Run the scoring
-if ! $skip_scoring ; then
-  [ ! -x local/score.sh ] && \
-    echo "Not scoring because local/score.sh does not exist or not executable." && exit 1;
-  local/score.sh $scoring_opts --cmd "$cmd" $data $graphdir $dir || exit 1;
-fi
+#if ! $skip_scoring ; then
+#  [ ! -x local/score.sh ] && \
+#    echo "Not scoring because local/score.sh does not exist or not executable." && exit 1;
+#  local/score.sh $scoring_opts --cmd "$cmd" $data $graphdir $dir || exit 1;
+#fi
 
 exit 0;
